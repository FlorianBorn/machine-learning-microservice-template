node {
    checkout(scm)
    config = readYaml(file: "config.yaml")
    runtime_image = "${config.repository}/${config.runtime_image_name}:${config.runtime_image_tag}"
    pipeline_path = "jenkins/build-image"


    stage('Run Unit Tests') {
        img = docker.image("${runtime_image}")
        img.inside {
            sh "pytest ."
        }
    }


    stage("Lint Webservice") {
        withDockerContainer(image: "${config.repository}/${config.runtime_image_name}:${config.runtime_image_tag}", args: "-u 0:0") {
            sh "${pipeline_path}/lint_python.sh main.py"
            //sh "pylint --exit-zero --extension-pkg-whitelist=pydantic main.py" // --exit-zero returns always 0
        }
    }

    stage("Lint Dockerfile") {
        dir("dockerfiles/production-image") {
            sh "docker run --rm -i hadolint/hadolint < Dockerfile"
        }
    }

    stage("Build Image") {       
        sh "echo Build Image"
        sh "jenkins/build-image/build.sh ${config.production_image_name} ${config.production_image_tag}"
    }    

    stage("Test Image") {
        sh "echo Build the Production Image!"
        withDockerContainer(image: "${config.repository}/${config.runtime_image_name}:${config.runtime_image_tag}", args: "-u 0:0 -v /var/run/docker.sock:/var/run/docker.sock") {
            sh "python3 jenkins/build-image/test.py ${config.production_image_name} ${config.production_image_tag}"
        }
    }
 
    stage("Push Image") {
        sh "echo Push Model!"
        withDockerRegistry(url: "${config.registry}", credentialsId: "${config.docker_credentials_id}") {
            sh "jenkins/build-image/push.sh ${config.production_image_name} ${config.production_image_tag} ${config.repository}"     
        }
    }
}