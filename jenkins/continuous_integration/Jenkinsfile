node {
    //def build_config = readYaml(file: "config/build.yaml")
    env_file_name  = "env.sample"
}


pipeline{

    agent{
        label "master"
    }
    stages{
        stage ("Load Configs") {
            steps {
                echo "========Load Configs========"
                script {
                    build_config = readYaml(file: "config/build.yaml")
                    echo "${build_config}"
                    echo "${build_config['docker_runtime_image_name']}"
                    runtime_image  ="${build_config['docker_runtime_image_name']}:${build_config['docker_runtime_image_tag']}"
                }
                echo "${build_config}"
                ansibleVault(action: "decrypt", input: "config/${env_file_name}", vaultCredentialsId: "${build_config.jenkins_ansible_vault_id}")
                sh "chmod 644 config/${env_file_name}"
            }
            post{
                always{
                    echo "========encrypt .env file ========"
                    ansibleVault(action: "encrypt", input: "config/${env_file_name}", vaultCredentialsId: "${build_config.jenkins_ansible_vault_id}")
                }

            }
        }

        stage("Run Unit Tests"){
            environment {
                runtime_image = "${build_config['docker_runtime_image_name']}:${build_config['docker_runtime_image_tag']}"
            }
            agent {
                docker { 
                    image "${runtime_image}"
                    args "--env-file config/${env_file_name}"
                }
            }
            steps{
                echo "========Run Unit Tests========"
                sh "pytest ."
            }
            post{
                always{
                    echo "========always========"
                }
                success{
                    echo "========A executed successfully========"
                }
                failure{
                    echo "========A execution failed========"
                }
            }
        }
        
    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}